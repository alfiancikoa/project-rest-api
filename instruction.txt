Clone project ini terlebih dahulu
>>> git clone https://github.com/alfiancikoa/project-rest-api.git

----------------------------------------------
Jika menggunakan localhost
----------------------------------------------
1. Create File .env dan Set Environtmen sesuai dengan data mysql local
    contoh :
        MYSQL_USER=root
        MYSQL_PASSWORD=password
        MYSQL_HOST=localhost
        MYSQL_PORT=3306
        MYSQL_DBNAME=db_name
        MYSQL_ROOT_PASSWORD=password
2. Buat database di Mysql sesuai keinginan (create database db_name)
3. go run main.go

----------------------------------------------
Jika menggunakan Docker
----------------------------------------------
----SETUP DOCKER MYSQL----
--------------------------
1. Pastikan Docker Image mysql sudah terdownload (docker image pull mysql:latest)
2. Jalankan Docker Image (docker run --name dockerMySQL -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=db_name -d mysql:latest)
3. Cek Container apakah sudah berjalan (docker container ls)
4. Database pada container akan otomatis terbuat 
5. Jika ingin mengecek apakah database sudah terbuat dapat mengguanakan perintah
6. Masuk ke container untuk membuat database (docker exec -it dockerMySQL bash)
7. Login MySQL dengan memasukkan password (mysql -u root -p)
8. Show Database dengan perintah (show databases;)
9. Keluar dari mysql (exit) (exit)
--------------------------
----SETUP DOCKER APP----
--------------------------
1. Cek host IPAddress Docker Container MySQL (docker inspect -f '{{.Name}} - {{.NetworkSettings.IPAddress }}' $(docker ps -aq))
2. Contoh Hasil Perintah di atas : /dockerMySQL - 172.17.0.1  -- ini bisa berbeda sesuai dengan container masing2
3. Setup environtmen password, host, dan nama database
4. Contoh : MYSQL_USER=root           // default dari MySQL
            MYSQL_PASSWORD=password   // pastikan password di sini sama dengan password pada (MYSQL_ROOT_PASSWORD=password)
            MYSQL_HOST=172.17.0.1     // ini adalah host ip default dari Docker, bisa jadi tiap container mempunyai host yang berbeda.
            MYSQL_PORT=3306           // default port MySQL
            MYSQL_DBNAME=dbproject    // pastikan nama database sama dengan yang telah diinisialisasi sebelumnya pada (MYSQL_DATABASE=dbproject)
5. Build Docker Image (docker build -t nama-image:latest .)
6. Jalankan Docker Image dengan konfigurasi environtmen 
(docker run --name nameContainerAPI -p 8080:8080 nama-image:latest)
7. Program akan otomatis berjalan di atas container
8. Tekan Ctrl+C jika ingin stop interrupt
9. Jika ingin menyalakan aplikasi lagi, cukup dengan start nama container
10. Cek nama container Api (docker container ls -a)
11. Lakukan start pada container (docker container start nama-container) - menjalankan = start/ berhenti = stop

----------------------------------------------
Jika ingin Mengetes Unit Testing Coverage
----------------------------------------------
------------------------------
--Jika menggunakan Localhost--
------------------------------
1. Masuk ke menu SQL
2. Create Database untuk testing (create database db_name_test)
3. Keluar dari menu mysql (exit)
4. Setting konfigurasi port, host, dan db_name sesuai dengan yang sedang berjalan di dalam file config.go pada InitDBTest()
5. permission allowed (chmod +x test.sh)
4. kemudian run script (./test.sh)
7. Jika ingin melihat report coverage, jalankan script (test-report.sh)

------------------------------
--Jika menggunakan Docker--
------------------------------
1. Masuk ke container untuk membuat database (docker exec -it dockerMySQL bash)
2. Login MySQL dengan memasukkan password (mysql -u root -p)
3. Create Database (create database db_name_test)
4. keluar dari menu mysql (exit)
5. Setting konfigurasi port, host, dan db_name sesuai dengan yang sedang berjalan di dalam file config.go pada InitDBTest()
6. permission allowed (chmod +x test.sh)
7. kemudian run script (./test.sh)
8. Jika ingin melihat report coverage, jalankan script (test-report.sh)
